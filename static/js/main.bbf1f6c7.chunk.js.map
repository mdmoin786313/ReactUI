{"version":3,"sources":["components/headerComponent/Header.js","components/contentTop/ContentTop.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","id","style","textAlign","Component","ContentTop","App","headerComponent_Header","contentTop_ContentTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAwDeA,mLApDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,GAAGD,UAAU,QAArB,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,QACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,WACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,WACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,OACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,GAAGC,GAAG,SAAd,WACAL,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,YACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,WACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAR,YAEJJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAACC,UAAW,SACrBP,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAACC,UAAW,SACrBP,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,8BA7CKM,aCiBNC,mLAfX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oBACJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,qDARKM,aCeVE,0LATX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,cALUJ,cCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbf1f6c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <a href=\"\" className=\"logo\">NetHosting</a>\r\n        <div className=\"header-links\">\r\n            <a href=\"\">Home</a>\r\n            <a href=\"\">Domains</a>\r\n            <a href=\"\">Hosting</a>\r\n            <a href=\"\">VPS</a>\r\n            <a href=\"\" id=\"price\">Pricing</a>\r\n            <a href=\"\">Business</a>\r\n            <a href=\"\">Support</a>\r\n            <a href=\"\">SignUp!</a>\r\n        </div>\r\n        <div className=\"pricing-list\">\r\n            <div className=\"pricing-list-part\">\r\n              <h3>Node.js Hosting Plan</h3>\r\n              <div className=\"line\"></div>\r\n              <h1>&#8377;599/m</h1>\r\n              <h4>Great Start For Single Node Site!</h4>\r\n              <ul style={{textAlign: \"left\"}}>\r\n                <li>1 Website</li>\r\n                <li>Unlimited Storage</li>\r\n                <li>Unmetered Bandwidth</li>\r\n                <li>10 MySQL DB (1GB each)</li>\r\n                <li>Free cPanel</li>\r\n                <li>Free SSl and SSD</li>\r\n                <li>Free and Easy Site Transfer</li>\r\n                <li>Turbo</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"pricing-list-part\">\r\n              <h3>AngularJS Hosting Plan</h3>\r\n              <div className=\"line\"></div>\r\n              <h1>&#8377;499/m</h1>\r\n              <h4>Great Start For Single Angular Site!</h4>\r\n              <ul style={{textAlign: \"left\"}}>\r\n                <li>1 Website</li>\r\n                <li>Unlimited Storage</li>\r\n                <li>Unmetered Bandwidth</li>\r\n                <li>10 MySQL DB (1GB each)</li>\r\n                <li>Free cPanel</li>\r\n                <li>Free SSl and SSD</li>\r\n                <li>Free and Easy Site Transfer</li>\r\n                <li>Turbo</li>\r\n              </ul>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ContentTop extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"contentTop\">\r\n        <table>\r\n            <tr>\r\n                <td><h2>Hello</h2></td>\r\n                <td>\r\n                    <h2>World's Best Hosting Service</h2>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentTop;","import React, { Component } from 'react';\n\nimport Header from './components/headerComponent/Header.js';\nimport ContentTop from './components/contentTop/ContentTop.js';\nimport './Assets/scss/new.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <ContentTop />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}